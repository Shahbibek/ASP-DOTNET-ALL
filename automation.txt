npx playwright test -- all test run
npx install -D allure-commandline
npx allure generate ./allure-results --clean
npx allure open ./allure-report

------------------------------Playwright--------------------------------------------------

import { test, expect } from '@playwright/test';
import { baseUrl, positiveTestCases, negativeTestCases } from './loginBase.spec';

positiveTestCases.forEach(positiveTest => {
  test(positiveTest.loginMethod.NormalLogin+' Positive-Test: ' +positiveTest.name, async ({ page }) => {
    await page.goto(baseUrl);
    await page.getByRole('img').nth(2).click();
    await page.getByPlaceholder('Username').fill(positiveTest.name);
    await page.getByPlaceholder('Password').fill(positiveTest.password);
    await page.getByRole('button', { name: 'Login' }).press('Enter');
    await page.getByRole('button', { name: 'OK' }).press('Enter');
    await page.waitForTimeout(5000);
    const currentURL = page.url();
    await expect(currentURL).toEqual(expect.stringContaining(positiveTest.expectedURL));
  });
});

negativeTestCases.forEach(negativeTest => {
  test(negativeTest.loginMethod.NormalLogin+' Negative-Test: ' +negativeTest.name, async ({ page }) => {
    await page.goto(baseUrl);
    await page.getByRole('img').nth(2).click();
    await page.getByPlaceholder('Username').fill(negativeTest.name);
    await page.getByPlaceholder('Password').fill(negativeTest.password);
    await page.getByRole('button', { name: 'Login' }).press('Enter');
    await expect(page.locator('#toast-container')).toContainText(negativeTest.expectedMessage);
  });
});

positiveTestCases.forEach(positiveTest => {
  test(positiveTest.loginMethod.SSOLogin+' Positive-Test: ' +positiveTest.name, async ({ page }) => {
    await page.goto(baseUrl);
    await page.getByRole('img').nth(2).click();
    await page.getByPlaceholder('Username').fill(positiveTest.name);
    await page.getByPlaceholder('Password').fill(positiveTest.password);
    await page.getByRole('button', { name: 'Login' }).press('Enter');
    await page.getByRole('button', { name: 'OK' }).press('Enter');
    await page.waitForTimeout(5000);
    const currentURL = page.url();
    await expect(currentURL).toEqual(expect.stringContaining(positiveTest.expectedURL));
  });
});

-----------------------------------------------------------Basefile-----------------------------------------------
export const baseUrl = '';

export const positiveTestCases = [
    {
      name: 'test_User1',
      password: 'test_User1',
      loginMethod: {
        SSOLogin:'SSO Login',
        NormalLogin: 'Normal Login',
        ManualLogin: 'Manual Login',
        SamlRequestLogin: 'Saml Request Login',
      },
      email:'er.bibeksah@gmail.com',
      expectedURL: `${baseUrl}DashBoard`,
      expectedMessage: null
    }   
  ];


export const negativeTestCases = [
    {
      name: 'test_User1',
      password: 'test1',
      loginMethod: {
        SSOLogin:'SSO Login',
        NormalLogin: 'Normal Login',
        ManualLogin: 'Manual Login',
        SamlRequestLogin: 'Saml Request Login',
      },
      expectedURL: `${baseUrl}DashBoard`,
      expectedMessage: 'Invalid username or password'
    },
    {
      name: 'test_User2',
      password: 'test2',
      loginMethod: {
        SSOLogin:'SSO Login',
        NormalLogin: 'Normal Login',
        ManualLogin: 'Manual Login',
        SamlRequestLogin: 'Saml Request Login',
      },
      expectedURL: `${baseUrl}DashBoard`,
      expectedMessage: 'Invalid username or password'


  }
  ];

______________________________________________________________ EXCEL FILE _________________________________________________

const ExcelJS = require('exceljs');
const fs = require('fs').promises;
const path = require('path');

test('Test Excel', async ({ page }) => {
  await page.goto('https://www.facebook.com/');
  const testData = await page.evaluate(() => {
    return [
        {
          testName: 'Test1',
          testTime: '10:00',
          testResult: 'Pass',
          isTestSuccess: '',
          testErrorMsg: '',
          fileLocation: 'no'
        }
    ];
});
await WriteToExcelAndSave(page, testData);

});


async function WriteToExcelAndSave(page, p_data){
  // Create a new workbook and worksheet
  const workbook = new ExcelJS.Workbook();
  const worksheet = workbook.addWorksheet('Test Data');
  console.log(`Creating Excel file: Procesing...`);

  // Define column headers
  worksheet.columns = [
    { header: 'TESTNAME', key: 'testName'},
    { header: 'TESTTIME', key: 'testTime'},
    { header: 'TESTRESULT', key: 'testResult'},
    { header: 'ISTESTSUCCESS', key: 'isTestSuccess'},
    { header: 'TESTERRORMSG', key: 'testErrorMsg'},
    { header: 'FILELOCATION', key: 'fileLocation'}
  ];

  worksheet.getRow(1).fill = {
    type: 'pattern',
    pattern: 'solid',
    fgColor: { argb: 'FFA0A0A0' }
  };
  worksheet.getRow(1).font = {
      bold: true
  };


  // Add data to the worksheet
  p_data.forEach((row) => {
      worksheet.addRow(row);
  });

  // autofit 
  worksheet.columns.forEach((column) => {
    column.width = column.header.length < 10 ? 10 : column.header.length + 2; // Minimum width is set to 10
    worksheet.eachRow({ includeEmpty: true }, function(row) {
        const cell = row.getCell(column.key);
        if (cell && cell.value) {
            const cellLength = cell.value.toString().length;
            if (cellLength > column.width - 2) {
                column.width = cellLength + 2;
            }
        }
    });
});

  worksheet.eachRow({ includeEmpty: false }, function (row) {
    const testIsSuccessCell = row.getCell('isTestSuccess');
    const testerrorCell = row.getCell('testErrorMsg');

    if (testIsSuccessCell && testIsSuccessCell.value) {
      testIsSuccessCell.fill = {
          type: 'pattern',
          pattern: 'solid',
          fgColor: { argb: 'FF00FF00' } // Green color
      };
    }

    if (testerrorCell && testerrorCell.value) {
        testerrorCell.fill = {
            type: 'pattern',
            pattern: 'solid',
            fgColor: { argb: 'FFFF0000' } // Red color
        };
    }
  });

  const folderPath = path.join(__dirname, 'EXCELTEST');
  const filePath = path.join(folderPath, 'testData.xlsx');
  await fs.mkdir(folderPath, { recursive: true });
  await workbook.xlsx.writeFile(filePath);
  console.log(`Excel file downloaded: Completed !!.`);
}
  


